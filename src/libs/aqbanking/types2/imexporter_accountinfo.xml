<?xml?>

<tm2>
  <type id="AB_IMEXPORTER_ACCOUNTINFO" type="pointer">
    <descr>
    </descr>

    <lang id="c">
      <identifier>AB_IMEXPORTER_ACCOUNTINFO</identifier>
      <prefix>AB_ImExporterAccountInfo</prefix>
      
      <baseFileName>imexporter_accountInfo</baseFileName>
      
      <flags>
        with_db
        with_xml
        with_list1
        with_list2
        with_refcount
        with_hash
      </flags>
      
      <headers>
        <header type="sys" loc="pre">aqbanking/error.h</header>
        <header type="sys" loc="pre">gwenhywfar/types.h</header>
        <header type="sys" loc="pre">gwenhywfar/gwentime.h</header>

        <header type="sys" loc="post">aqbanking/transaction.h</header>
        <header type="sys" loc="post">aqbanking/accstatus.h</header>
        <header type="sys" loc="post">aqbanking/document.h</header>
        <header type="sys" loc="post">aqbanking/account.h</header>
      </headers>



      <inlines>

        <inline loc="end" access="public">
          <typeFlagsMask>with_list2</typeFlagsMask>
          <typeFlagsValue>with_list2</typeFlagsValue>
          <content>
             $(api) int $(struct_prefix)_List2_freeAll($(struct_type)_LIST2 *tl);
          </content>
        </inline>

        <inline loc="code">
          <typeFlagsMask>with_list2</typeFlagsMask>
          <typeFlagsValue>with_list2</typeFlagsValue>
          <content>

             static $(struct_type) *$(struct_prefix)_List2__freeAll_cb($(struct_type) *t, void *user_data) {
               $(struct_prefix)_free(t);
               return NULL;
             }


             int $(struct_prefix)_List2_freeAll($(struct_type)_LIST2 *tl) {
               if (tl) {
                 $(struct_prefix)_List2_ForEach(tl, $(struct_prefix)_List2__freeAll_cb, NULL);
                 $(struct_prefix)_List2_free(tl); 
               }
               else {
                 DBG_ERROR(AQBANKING_LOGDOMAIN, "List missing");
                 return GWEN_ERROR_INVALID;
               }
               return 0;
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             $(api) AB_TRANSACTION *$(struct_prefix)_GetFirstTransaction(const $(struct_type) *t);
          </content>
        </inline>

        <inline loc="code">
          <content>
             AB_TRANSACTION *$(struct_prefix)_GetFirstTransaction(const $(struct_type) *st) {
               assert(st);
               if (st->transactionList)
                 return AB_Transaction_List_First(st->transactionList);
               return NULL;
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             $(api) void $(struct_prefix)_AddTransaction($(struct_type) *st, AB_TRANSACTION *t);
          </content>
        </inline>

        <inline loc="code">
          <content>
             void $(struct_prefix)_AddTransaction($(struct_type) *st, AB_TRANSACTION *t) {
               assert(st);
               if (NULL==st->transactionList)
                 st->transactionList=AB_Transaction_List_new();
               AB_Transaction_List_Add(t, st->transactionList);
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             $(api) AB_ACCOUNT_STATUS *$(struct_prefix)_GetFirstAccountStatus(const $(struct_type) *as);
          </content>
        </inline>

        <inline loc="code">
          <content>
             AB_ACCOUNT_STATUS *$(struct_prefix)_GetFirstAccountStatus(const $(struct_type) *as) {
               assert(as);
               if (as->accountStatusList)
                 return AB_AccountStatus_List_First(as->accountStatusList);
               return NULL;
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             $(api) void $(struct_prefix)_AddAccountStatus($(struct_type) *st, AB_ACCOUNT_STATUS *as);
          </content>
        </inline>

        <inline loc="code">
          <content>
             void $(struct_prefix)_AddAccountStatus($(struct_type) *st, AB_ACCOUNT_STATUS *as) {
               assert(as);
               if (NULL==st->accountStatusList)
                 st->accountStatusList=AB_AccountStatus_List_new();
               AB_AccountStatus_List_Add(as, st->accountStatusList);
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             $(api) AB_DOCUMENT *$(struct_prefix)_GetFirstEStatement(const $(struct_type) *st);
          </content>
        </inline>

        <inline loc="code">
          <content>
             AB_DOCUMENT *$(struct_prefix)_GetFirstEStatement(const $(struct_type) *st) {
               assert(st);
               if (st->eStatementList)
                 return AB_Document_List_First(st->eStatementList);
               return NULL;
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             $(api) void $(struct_prefix)_AddEStatement($(struct_type) *st, AB_DOCUMENT *d);
          </content>
        </inline>

        <inline loc="code">
          <content>
             void $(struct_prefix)_AddEStatement($(struct_type) *st, AB_DOCUMENT *d) {
               assert(d);
               if (NULL==st->eStatementList)
                 st->eStatementList=AB_Document_List_new();
               AB_Document_List_Add(d, st->eStatementList);
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             /** \n
              * This function clears the account info (e.g. removes all transactions etc). \n
              */ \n
             $(api) void $(struct_prefix)_Clear($(struct_type) *st);
          </content>
        </inline>

        <inline loc="code">
          <content>
             void $(struct_prefix)_Clear($(struct_type) *st) {
               assert(st);
               if (st->transactionList)
                 AB_Transaction_List_Clear(st->transactionList);
               if (st->accountStatusList)
                 AB_AccountStatus_List_Clear(st->accountStatusList);
               if (st->eStatementList)
                 AB_Document_List_Clear(st->eStatementList);
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             $(api) void $(struct_prefix)_FillFromAccount($(struct_type) *st, const AB_ACCOUNT *a);
          </content>
        </inline>

        <inline loc="code">
          <content>
             void $(struct_prefix)_FillFromAccount($(struct_type) *st, const AB_ACCOUNT *a) {
               const char *s;
               AB_ACCOUNT_TYPE at;
             
               assert(st);
               assert(a);
             
               s=AB_Account_GetBankCode(a);
               $(struct_prefix)_SetBankCode(st, s);
             
               s=AB_Account_GetBankName(a);
               $(struct_prefix)_SetBankName(st, s);
             
               s=AB_Account_GetAccountNumber(a);
               $(struct_prefix)_SetAccountNumber(st, s);

               s=AB_Account_GetSubAccountId(a);
               $(struct_prefix)_SetSubAccountId(st, s);
             
               s=AB_Account_GetAccountName(a);
               $(struct_prefix)_SetAccountName(st, s);
             
               s=AB_Account_GetIBAN(a);
               $(struct_prefix)_SetIban(st, s);
             
               s=AB_Account_GetBIC(a);
               $(struct_prefix)_SetBic(st, s);
             
               s=AB_Account_GetCurrency(a);
               $(struct_prefix)_SetCurrency(st, s);
             
               s=AB_Account_GetOwnerName(a);
               $(struct_prefix)_SetOwner(st, s);
             
               at=AB_Account_GetAccountType(a);
               $(struct_prefix)_SetAccountType(st, at);
             }
          </content>
        </inline>


        <inline loc="end" access="public">
          <content>
             $(api) void $(struct_prefix)_FillFromTransaction($(struct_type) *st, const AB_TRANSACTION *t);
          </content>
        </inline>

        <inline loc="code">
          <content>
             void $(struct_prefix)_FillFromTransaction($(struct_type) *st, const AB_TRANSACTION *t) {
               const char *s;

               assert(st);
               assert(t);
             
               s=AB_Transaction_GetLocalBankCode(t);
               $(struct_prefix)_SetBankCode(st, s);
             
               s=AB_Transaction_GetLocalAccountNumber(t);
               $(struct_prefix)_SetAccountNumber(st, s);

               s=AB_Transaction_GetLocalSuffix(t);
               $(struct_prefix)_SetSubAccountId(st, s);
             
               s=AB_Transaction_GetLocalIban(t);
               $(struct_prefix)_SetIban(st, s);
             
               s=AB_Transaction_GetLocalBic(t);
               $(struct_prefix)_SetBic(st, s);
             
               s=AB_Transaction_GetLocalName(t);
               $(struct_prefix)_SetOwner(st, s);
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             $(api) AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_GetByBankCodeAndAccountNumber($(struct_type)_LIST *l, 
                                                                                                   const char *bankCode,
                                                                                                   const char *accountNumber,
                                                                                                   int accountType);
          </content>
        </inline>

        <inline loc="code">
          <content>
             AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_GetByBankCodeAndAccountNumber($(struct_type)_LIST *l, 
                                                                                            const char *bankCode,
                                                                                            const char *accountNumber,
                                                                                            int accountType) {
               AB_IMEXPORTER_ACCOUNTINFO *iea;
             
               assert(l);
               
               if (!bankCode)
                 bankCode="";
               if (!accountNumber)
                 accountNumber="";
             
               iea=$(struct_prefix)_List_First(l);
               while(iea) {
                 const char *sBankCode;
                 const char *sAccountNumber;
             
                 sBankCode=$(struct_prefix)_GetBankCode(iea);
                 if (sBankCode==NULL)
                   sBankCode="";
                 sAccountNumber=$(struct_prefix)_GetAccountNumber(iea);
                 if (sAccountNumber==NULL)
                   sAccountNumber="";

                 if ((strcasecmp(sBankCode, bankCode)==0) &amp;&amp;
                     (strcasecmp(sAccountNumber, accountNumber)==0) &amp;&amp;
                     ((accountType&lt;=AB_AccountType_Unknown) || (accountType==$(struct_prefix)_GetAccountType(iea)))
                    )
                   return iea;
                 
                 iea=$(struct_prefix)_List_Next(iea);
               }
               
               return NULL;
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             $(api) AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_Find($(struct_type)_LIST *l,
                                                                          uint32_t uniqueId,
                                                                          const char *iban,
                                                                          const char *bankCode,
                                                                          const char *accountNumber,
                                                                          int accountType);
          </content>
        </inline>

        <inline loc="code">
          <content>
             AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_Find($(struct_type)_LIST *l,
                                                                   uint32_t uniqueId,
                                                                   const char *iban,
                                                                   const char *bankCode,
                                                                   const char *accountNumber,
                                                                   int accountType) {
               AB_IMEXPORTER_ACCOUNTINFO *iea=NULL;
             
               assert(l);
               
               if (uniqueId)
                 iea=$(struct_prefix)_List_GetByAccountId(l, uniqueId);
               
               if (iea==NULL &amp;&amp; iban &amp;&amp; *iban)
                 $(struct_prefix)_List_GetByIban(l, iban);
               
               if (iea==NULL)
                 iea=$(struct_prefix)_List_GetByBankCodeAndAccountNumber(l, bankCode, accountNumber, accountType);
               
               return iea;
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             $(api) AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_GetByAccount($(struct_type)_LIST *l, const AB_ACCOUNT *a);
          </content>
        </inline>

        <inline loc="code">
          <content>
             AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_GetByAccount($(struct_type)_LIST *l, const AB_ACCOUNT *a) {
               assert(l);
               assert(a);
               
               return $(struct_prefix)_List_Find(l,
                                                 AB_Account_GetUniqueId(a),
                                                 AB_Account_GetIBAN(a),
                                                 AB_Account_GetBankCode(a),
                                                 AB_Account_GetAccountNumber(a),
                                                 AB_Account_GetAccountType(a));
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             $(api) AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_GetOrAddByAccount($(struct_type)_LIST *l, const AB_ACCOUNT *a);
          </content>
        </inline>

        <inline loc="code">
          <content>
             AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_GetOrAddByAccount($(struct_type)_LIST *l, const AB_ACCOUNT *a) {
               AB_IMEXPORTER_ACCOUNTINFO *iea=NULL;
             
               assert(l);
               
               iea=$(struct_prefix)_List_GetByAccount(l, a);
               if (iea==NULL) {
                 iea=$(struct_prefix)_new();
                 $(struct_prefix)_FillFromAccount(iea, a);
                 $(struct_prefix)_List_Add(iea, l);
               }
               return iea;
             }
          </content>
        </inline>


        <inline loc="end" access="public">
          <content>
             $(api) AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_GetOrAdd($(struct_type)_LIST *l,
                                                                              uint32_t uniqueId,
                                                                              const char *iban,
                                                                              const char *bankCode,
                                                                              const char *accountNumber,
                                                                              int accountType);
          </content>
        </inline>

        <inline loc="code">
          <content>
             AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_GetOrAdd($(struct_type)_LIST *l,
                                                                       uint32_t uniqueId,
                                                                       const char *iban,
                                                                       const char *bankCode,
                                                                       const char *accountNumber,
                                                                       int accountType) {
               AB_IMEXPORTER_ACCOUNTINFO *iea=NULL;
             
               assert(l);
               
               iea=$(struct_prefix)_List_Find(l, uniqueId, iban, bankCode, accountNumber, accountType);
               if (iea==NULL) {
                 iea=$(struct_prefix)_new();
                 $(struct_prefix)_SetAccountId(iea, uniqueId);
                 $(struct_prefix)_SetIban(iea, iban);
                 $(struct_prefix)_SetBankCode(iea, bankCode);
                 $(struct_prefix)_SetAccountNumber(iea, accountNumber);
                 $(struct_prefix)_SetAccountType(iea, accountType);
                 
                 $(struct_prefix)_List_Add(iea, l);
               }
               return iea;
             }
          </content>
        </inline>



      </inlines>


    </lang>

    <enums>

    </enums>

    <defines>

    </defines>


    <members>

      <member name="bankCode" type="char_ptr" maxlen="16" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="bankName" type="char_ptr" maxlen="64" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="accountNumber" type="char_ptr" maxlen="32" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="subAccountId" type="char_ptr" maxlen="32" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="accountName" type="char_ptr" maxlen="64" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="iban" type="char_ptr" maxlen="32" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash with_getbyMember</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="bic" type="char_ptr" maxlen="32" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="owner" type="char_ptr" maxlen="64" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="currency" type="char_ptr" maxlen="16" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="description" type="char_ptr" maxlen="64" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="accountType" type="int" maxlen="4" >
        <default>0</default>
        <preset>0</preset>
        <access>public</access>
        <flags>with_hash</flags>
        <setflags>none</setflags>
        <getflags>none</getflags>
      </member>

      <member name="accountId" type="uint32_t" maxlen="4">
        <flags>with_hash with_getbyMember</flags>
        <default>0</default>
        <preset>0</preset>
        <access>public</access>
        <descr>
        </descr>
      </member>

      <member name="accountStatusList" type="AB_ACCOUNT_STATUS_LIST" elementName="status">
        <descr>
        </descr>
        <default>NULL</default>
        <preset>AB_AccountStatus_List_new()</preset>
        <access>public</access>
        <flags>own</flags>
        <setflags>nodup</setflags>
        <getflags>none</getflags>
      </member>


      <member name="transactionList" type="AB_TRANSACTION_LIST" elementName="transaction">
        <descr>
          List of transactions.
          This list contains any kind of transactions all in one list. You can differentiate the type
          of the transaction (e.g. bank statement, debit note, transfer etc) by looking at the transaction type
          (see @ref AB_Transaction_GetType).
        </descr>
        <default>NULL</default>
        <preset>AB_Transaction_List_new()</preset>
        <access>public</access>
        <flags>own</flags>
        <setflags>nodup</setflags>
        <getflags>none</getflags>
      </member>

      <member name="eStatementList" type="AB_DOCUMENT_LIST" elementName="eStatement">
        <descr>
        </descr>
        <default>NULL</default>
        <preset>AB_Document_List_new()</preset>
        <access>public</access>
        <flags>own</flags>
        <setflags>nodup</setflags>
        <getflags>none</getflags>
      </member>

    </members>

    
  </type>
  
</tm2>

