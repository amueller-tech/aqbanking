<?xml?>

<tm2>
  <type id="AB_BALANCE" type="pointer">
    <descr>
      This class holds time and amount of an account balance.
    </descr>

    <lang id="c">
      <identifier>AB_BALANCE</identifier>
      <prefix>AB_Balance</prefix>
      
      <baseFileName>balance</baseFileName>
      
      <flags>
        with_db
        with_xml
        with_refcount
        with_list1
      </flags>
      
      <headers>
        <header type="sys" loc="pre">aqbanking/error.h</header>
        <header type="sys" loc="pre">gwenhywfar/types.h</header>
        <header type="sys" loc="pre">gwenhywfar/gwendate.h</header>

        <header type="sys" loc="post">aqbanking/value.h</header>
      </headers>



      <inlines>

        <inline loc="end" access="public">
          <typeFlagsMask>with_list2</typeFlagsMask>
          <typeFlagsValue>with_list2</typeFlagsValue>
          <content>
             $(api) int $(struct_prefix)_List2_freeAll($(struct_type)_LIST2 *tl);
          </content>
        </inline>

        <inline loc="code">
          <typeFlagsMask>with_list2</typeFlagsMask>
          <typeFlagsValue>with_list2</typeFlagsValue>
          <content>

             static $(struct_type) *$(struct_prefix)_List2__freeAll_cb($(struct_type) *t, void *user_data) {
               $(struct_prefix)_free(t);
               return NULL;
             }


             int $(struct_prefix)_List2_freeAll($(struct_type)_LIST2 *tl) {
               if (tl) {
                 $(struct_prefix)_List2_ForEach(tl, $(struct_prefix)_List2__freeAll_cb, NULL);
                 $(struct_prefix)_List2_free(tl); 
               }
               else {
                 DBG_ERROR(AQBANKING_LOGDOMAIN, "List missing");
                 return GWEN_ERROR_INVALID;
               }
               return 0;
             }
          </content>
        </inline>


        <inline loc="end" access="public">
          <typeFlagsMask>with_list1</typeFlagsMask>
          <typeFlagsValue>with_list1</typeFlagsValue>
          <content>
             $(api) AB_BALANCE *$(struct_prefix)_List_FindFirstByType(const $(struct_type)_LIST *bl, int ty);
          </content>
        </inline>

        <inline loc="code">
          <typeFlagsMask>with_list1</typeFlagsMask>
          <typeFlagsValue>with_list1</typeFlagsValue>
          <content>
             AB_BALANCE *$(struct_prefix)_List_FindFirstByType(const $(struct_type)_LIST *bl, int ty) {
               AB_BALANCE *bal;
               
               assert(bl);
               bal=AB_Balance_List_First(bl);
               while(bal) {
                 if (ty==AB_Balance_TypeNone || ty==bal->type)
                   return bal;
                 bal=AB_Balance_List_Next(bal);
               }
               
               return NULL;
             }
          </content>
        </inline>


        <inline loc="end" access="public">
          <typeFlagsMask>with_list1</typeFlagsMask>
          <typeFlagsValue>with_list1</typeFlagsValue>
          <content>
             $(api) AB_BALANCE *$(struct_prefix)_List_FindNextByType($(struct_type) *bal, int ty);
          </content>
        </inline>

        <inline loc="code">
          <typeFlagsMask>with_list1</typeFlagsMask>
          <typeFlagsValue>with_list1</typeFlagsValue>
          <content>
             AB_BALANCE *$(struct_prefix)_List_FindNextByType($(struct_type) *bal, int ty) {
               assert(bal);
               bal=AB_Balance_List_Next(bal);
               while(bal) {
                 if (ty==AB_Balance_TypeNone || ty==bal->type)
                   return bal;
                 bal=AB_Balance_List_Next(bal);
               }
               
               return NULL;
             }
          </content>
        </inline>


        <inline loc="end" access="public">
          <typeFlagsMask>with_list1</typeFlagsMask>
          <typeFlagsValue>with_list1</typeFlagsValue>
          <content>
             $(api) AB_BALANCE *$(struct_prefix)_List_GetLatestByType(const $(struct_type)_LIST *bl, int ty);
          </content>
        </inline>

        <inline loc="code">
          <typeFlagsMask>with_list1</typeFlagsMask>
          <typeFlagsValue>with_list1</typeFlagsValue>
          <content>
             AB_BALANCE *$(struct_prefix)_List_GetLatestByType(const $(struct_type)_LIST *bl, int ty) {
               AB_BALANCE *lastBal=NULL;
               const GWEN_DATE *lastDt=NULL;
               AB_BALANCE *bal=NULL;
             
               bal=AB_Balance_List_First(bl);
               while(bal) {
                 if (ty==0 || (AB_Balance_GetType(bal)==ty)) {
                   const GWEN_DATE *dt;
             
                   if (lastBal && lastDt && (dt=AB_Balance_GetDate(bal))) {
                     if (GWEN_Date_Compare(dt, lastDt)>0) {
                       lastBal=bal;
                       lastDt=dt;
                     }
                   }
                   else {
                     lastBal=bal;
                     lastDt=AB_Balance_GetDate(bal);
                   }
                 }
                 bal=AB_Balance_List_Next(bal);
               }

               return lastBal;
             }
          </content>
        </inline>


      </inlines>


    </lang>

    <enums>

      <enum id="AB_BALANCE_TYPE" prefix="AB_Balance_Type" type="AB_BALANCE_TYPE">
        <item name="none" value="0"/>
        <item name="noted"/>
        <item name="booked"/>
        <item name="bankLine"/>
        <item name="disposable"/>
        <item name="temporary"/>
      </enum>

    </enums>

    <defines>

    </defines>


    <members>

      <member name="date" type="gwen_date" maxlen="16" >
        <aqdb_type>AQDB_DataType_String</aqdb_type>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
        <default>NULL</default>
        <preset>NULL</preset>
      </member>

      <member name="value" type="AB_VALUE" maxlen="256" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
        <default>NULL</default>
        <preset>NULL</preset>
      </member>

      <member name="type" type="int" maxlen="32" enum="AB_BALANCE_TYPE" >
        <default>AB_Balance_TypeUnknown</default>
        <preset>AB_Balance_TypeUnknown</preset>
        <access>public</access>
        <flags>enum with_getbymember</flags>
        <setflags>none</setflags>
        <getflags>none</getflags>
      </member>

    </members>

    
  </type>
  
</tm2>

