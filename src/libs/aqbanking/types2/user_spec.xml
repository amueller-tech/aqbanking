<?xml?>

<tm2>
  <type id="AB_USER_SPEC" type="pointer">
    <descr>
      This type contains all important information about accounts.
      All text fields are in UTF-8.
    </descr>

    <lang id="c">
      <identifier>AB_USER_SPEC</identifier>
      <prefix>AB_UserSpec</prefix>
      
      <baseFileName>user_spec</baseFileName>
      
      <flags>
        with_xml
        with_db
        with_list1
        with_list2
        with_refcount
      </flags>
      
      <headers>
        <header type="sys" loc="pre">gwenhywfar/text.h</header>
        <header type="sys" loc="pre">aqbanking/error.h</header>

      </headers>


      <inlines>


        <inline loc="end" access="public">
          <typeFlagsMask>with_list1</typeFlagsMask>
          <typeFlagsValue>with_list1</typeFlagsValue>
          <content>
             /** \n
              * Find an user info object in a list of account info objects.                      \n
              * @param al list of user info objects among to search                              \n
              * @param backendName name of the banking backend (wildcards and jokers allowed)    \n
              * @param country ISO code of the country (wildcards and jokers allowed)            \n
              * @param bankId bank code to search for (wildcards and jokers allowed)             \n
              * @param userId user id to search for (wildcards and jokers allowed)               \n
              * @param customerId customer id to search for (wildcards and jokers allowed)       \n
              */                                                                                 \n
             $(api) $(struct_type) *$(struct_prefix)_List_Find($(struct_type)_LIST *ul,
                                                               const char *backendName,
                                                               const char *country,
                                                               const char *bankId,
                                                               const char *userId,
                                                               const char *customerId);
          </content>
        </inline>



        <inline loc="code">
          <typeFlagsMask>with_list1</typeFlagsMask>
          <typeFlagsValue>with_list1</typeFlagsValue>
          <content>
             $(struct_type) *$(struct_prefix)_List_Find($(struct_type)_LIST *ul,
                                                        const char *backendName,
                                                        const char *country,
                                                        const char *bankId,
                                                        const char *userId,
                                                        const char *customerId) {
               $(struct_type) *u;
             
               if ($(struct_prefix)_List_GetCount(ul)==0) {
                 DBG_INFO(AQBANKING_LOGDOMAIN, "No users");
                 return NULL;
               }
               u=$(struct_prefix)_List_First(ul);
               assert(u);
             
               if (!backendName) backendName="*";
               if (!country) country="*";
               if (!bankId) bankId="*";
               if (!userId) userId="*";
               if (!customerId) customerId="*";
             
               while(u) {
                 const char *lbackendName;
             
                 lbackendName=$(struct_prefix)_GetBackendName(u);
                 if (! (lbackendName && *lbackendName) ) {
                   DBG_ERROR(AQBANKING_LOGDOMAIN,
                             "User: %s/%s/%s: No backend, ignoring",
                             $(struct_prefix)_GetCountry(u),
                             $(struct_prefix)_GetBankCode(u),
                             $(struct_prefix)_GetUserId(u));
                 }
                 else {
                   const char *lcountry;
                   const char *lbankId;
                   const char *luserId;
                   const char *lcustomerId;
             
                   lcountry=$(struct_prefix)_GetCountry(u);
                   lbankId=$(struct_prefix)_GetBankCode(u);
                   luserId=$(struct_prefix)_GetUserId(u);
                   lcustomerId=$(struct_prefix)_GetCustomerId(u);
               
                   if (!lcountry) lcountry="";
                   if (!lbankId) lbankId="";
                   if (!luserId) luserId="*";
                   if (!lcustomerId) lcustomerId="*";
                   
                   if ((-1!=GWEN_Text_ComparePattern(lbackendName, backendName, 0)) &amp;&amp;
                       (-1!=GWEN_Text_ComparePattern(lcountry, country, 0)) &amp;&amp;
                       (-1!=GWEN_Text_ComparePattern(lbankId, bankId, 0)) &amp;&amp;
                       (-1!=GWEN_Text_ComparePattern(luserId, userId, 0)) &amp;&amp;
                       (-1!=GWEN_Text_ComparePattern(lcustomerId, customerId, 0)))
                     break;
                 }
                 u=$(struct_prefix)_List_Next(u);
               } /* while */
             
               return u;
             }
          </content>
        </inline>



      </inlines>


    </lang>

    <enums>

    </enums>

    <defines>

    </defines>


    <members>

      <member name="uniqueId" type="uint32_t" maxlen="4">
        <default>0</default>
        <preset>0</preset>
        <access>public</access>
        <flags>with_getbymember</flags>
        <descr>
        </descr>
      </member>

      <member name="backendName" type="char_ptr" maxlen="32" >
        <access>public</access>
        <flags>own</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="userName" type="char_ptr" maxlen="32" >
        <access>public</access>
        <flags>own</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="userId" type="char_ptr" maxlen="32" >
        <access>public</access>
        <flags>own</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="customerId" type="char_ptr" maxlen="32" >
        <access>public</access>
        <flags>own</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="country" type="char_ptr" maxlen="32" >
        <access>public</access>
        <flags>own</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="bankCode" type="char_ptr" maxlen="32" >
        <access>public</access>
        <flags>own</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>


    </members>

    
  </type>
  
</tm2>

