<?xml?>

<tm2>
  <type id="AB_IMEXPORTER_ACCOUNTINFO" type="pointer">
    <descr>
    </descr>

    <lang id="c">
      <identifier>AB_IMEXPORTER_ACCOUNTINFO</identifier>
      <prefix>AB_ImExporterAccountInfo</prefix>
      
      <baseFileName>imexporter_accountInfo</baseFileName>
      
      <flags>
        with_db
        with_xml
        with_list1
        with_list2
        with_refcount
        with_hash
      </flags>
      
      <headers>
        <header type="sys" loc="pre">aqbanking/error.h</header>
        <header type="sys" loc="pre">gwenhywfar/types.h</header>
        <header type="sys" loc="pre">gwenhywfar/gwentime.h</header>

        <header type="sys" loc="post">aqbanking/types/transaction.h</header>
        <header type="sys" loc="post">aqbanking/types/document.h</header>
        <header type="sys" loc="post">aqbanking/account_type.h</header>
        <header type="sys" loc="post">aqbanking/types/balance.h</header>
      </headers>



      <inlines>

        <inline loc="end" access="public">
          <typeFlagsMask>with_list2</typeFlagsMask>
          <typeFlagsValue>with_list2</typeFlagsValue>
          <content>
             $(api) int $(struct_prefix)_List2_freeAll($(struct_type)_LIST2 *tl);
          </content>
        </inline>

        <inline loc="code">
          <typeFlagsMask>with_list2</typeFlagsMask>
          <typeFlagsValue>with_list2</typeFlagsValue>
          <content>

             static $(struct_type) *$(struct_prefix)_List2__freeAll_cb($(struct_type) *t, void *user_data) {
               $(struct_prefix)_free(t);
               return NULL;
             }


             int $(struct_prefix)_List2_freeAll($(struct_type)_LIST2 *tl) {
               if (tl) {
                 $(struct_prefix)_List2_ForEach(tl, $(struct_prefix)_List2__freeAll_cb, NULL);
                 $(struct_prefix)_List2_free(tl); 
               }
               else {
                 DBG_ERROR(AQBANKING_LOGDOMAIN, "List missing");
                 return GWEN_ERROR_INVALID;
               }
               return 0;
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             $(api) AB_TRANSACTION *$(struct_prefix)_GetFirstTransaction(const $(struct_type) *t, int ty, int cmd);
          </content>
        </inline>

        <inline loc="code">
          <content>
             AB_TRANSACTION *$(struct_prefix)_GetFirstTransaction(const $(struct_type) *st, int ty, int cmd) {
               assert(st);
               if (st->transactionList)
                 return AB_Transaction_List_FindFirstByType(st->transactionList, ty, cmd);
               return NULL;
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             $(api) void $(struct_prefix)_AddTransaction($(struct_type) *st, AB_TRANSACTION *t);
          </content>
        </inline>

        <inline loc="code">
          <content>
             void $(struct_prefix)_AddTransaction($(struct_type) *st, AB_TRANSACTION *t) {
               assert(st);
               if (NULL==st->transactionList)
                 st->transactionList=AB_Transaction_List_new();
               AB_Transaction_List_Add(t, st->transactionList);
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             $(api) int $(struct_prefix)_GetTransactionCount(const $(struct_type) *t, int ty, int cmd);
          </content>
        </inline>

        <inline loc="code">
          <content>
             int $(struct_prefix)_GetTransactionCount(const $(struct_type) *st, int ty, int cmd) {
               assert(st);
               if (st->transactionList)
                 return AB_Transaction_List_CountByType(st->transactionList, ty, cmd);
               return 0;
             }
          </content>
        </inline>


        <inline loc="end" access="public">
          <content>
             $(api) AB_BALANCE *$(struct_prefix)_GetFirstBalance(const $(struct_type) *as);
          </content>
        </inline>

        <inline loc="code">
          <content>
             AB_BALANCE *$(struct_prefix)_GetFirstBalance(const $(struct_type) *st) {
               assert(st);
               if (st->balanceList)
                 return AB_Balance_List_First(st->balanceList);
               return NULL;
             }
          </content>
        </inline>


        <inline loc="end" access="public">
          <content>
             $(api) void $(struct_prefix)_AddBalance($(struct_type) *st, AB_BALANCE *bal);
          </content>
        </inline>

        <inline loc="code">
          <content>
             void $(struct_prefix)_AddBalance($(struct_type) *st, AB_BALANCE *bal) {
               assert(bal);
               if (NULL==st->balanceList)
                 st->balanceList=AB_Balance_List_new();
               AB_Balance_List_Add(bal, st->balanceList);
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             $(api) AB_DOCUMENT *$(struct_prefix)_GetFirstEStatement(const $(struct_type) *st);
          </content>
        </inline>

        <inline loc="code">
          <content>
             AB_DOCUMENT *$(struct_prefix)_GetFirstEStatement(const $(struct_type) *st) {
               assert(st);
               if (st->eStatementList)
                 return AB_Document_List_First(st->eStatementList);
               return NULL;
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             $(api) void $(struct_prefix)_AddEStatement($(struct_type) *st, AB_DOCUMENT *d);
          </content>
        </inline>

        <inline loc="code">
          <content>
             void $(struct_prefix)_AddEStatement($(struct_type) *st, AB_DOCUMENT *d) {
               assert(d);
               if (NULL==st->eStatementList)
                 st->eStatementList=AB_Document_List_new();
               AB_Document_List_Add(d, st->eStatementList);
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             /** \n
              * This function clears the account info (e.g. removes all transactions etc). \n
              */ \n
             $(api) void $(struct_prefix)_Clear($(struct_type) *st);
          </content>
        </inline>

        <inline loc="code">
          <content>
             void $(struct_prefix)_Clear($(struct_type) *st) {
               assert(st);
               if (st->transactionList)
                 AB_Transaction_List_Clear(st->transactionList);
               if (st->balanceList)
                 AB_Balance_List_Clear(st->balanceList);
               if (st->eStatementList)
                 AB_Document_List_Clear(st->eStatementList);
             }
          </content>
        </inline>


<!--
        <inline loc="end" access="protected">
          <content>
             $(api) void $(struct_prefix)_FillFromAccount($(struct_type) *st, const AB_ACCOUNT *a);
          </content>
        </inline>

        <inline loc="code">
          <content>
             void $(struct_prefix)_FillFromAccount($(struct_type) *st, const AB_ACCOUNT *a) {
               const char *s;
               AB_ACCOUNT_TYPE at;
             
               assert(st);
               assert(a);
             
               s=AB_Account_GetBankCode(a);
               $(struct_prefix)_SetBankCode(st, s);
             
               s=AB_Account_GetBankName(a);
               $(struct_prefix)_SetBankName(st, s);
             
               s=AB_Account_GetAccountNumber(a);
               $(struct_prefix)_SetAccountNumber(st, s);

               s=AB_Account_GetSubAccountId(a);
               $(struct_prefix)_SetSubAccountId(st, s);

               $(struct_prefix)_SetAccountId(st, AB_Account_GetUniqueId(a));
             
               s=AB_Account_GetAccountName(a);
               $(struct_prefix)_SetAccountName(st, s);
             
               s=AB_Account_GetIban(a);
               $(struct_prefix)_SetIban(st, s);
             
               s=AB_Account_GetBic(a);
               $(struct_prefix)_SetBic(st, s);
             
               s=AB_Account_GetCurrency(a);
               $(struct_prefix)_SetCurrency(st, s);
             
               s=AB_Account_GetOwnerName(a);
               $(struct_prefix)_SetOwner(st, s);
             
               at=AB_Account_GetAccountType(a);
               $(struct_prefix)_SetAccountType(st, at);
             }
          </content>
        </inline>
-->


        <inline loc="end" access="public">
          <content>
             $(api) void $(struct_prefix)_FillFromTransaction($(struct_type) *st, const AB_TRANSACTION *t);
          </content>
        </inline>

        <inline loc="code">
          <content>
             void $(struct_prefix)_FillFromTransaction($(struct_type) *st, const AB_TRANSACTION *t) {
               const char *s;

               assert(st);
               assert(t);
             
               s=AB_Transaction_GetLocalBankCode(t);
               $(struct_prefix)_SetBankCode(st, s);
             
               s=AB_Transaction_GetLocalAccountNumber(t);
               $(struct_prefix)_SetAccountNumber(st, s);

               s=AB_Transaction_GetLocalSuffix(t);
               $(struct_prefix)_SetSubAccountId(st, s);
             
               s=AB_Transaction_GetLocalIban(t);
               $(struct_prefix)_SetIban(st, s);
             
               s=AB_Transaction_GetLocalBic(t);
               $(struct_prefix)_SetBic(st, s);
             
               s=AB_Transaction_GetLocalName(t);
               $(struct_prefix)_SetOwner(st, s);
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             $(api) AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_GetByBankCodeAndAccountNumber($(struct_type)_LIST *l, 
                                                                                                   const char *bankCode,
                                                                                                   const char *accountNumber,
                                                                                                   int accountType);
          </content>
        </inline>

        <inline loc="code">
          <content>
             AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_GetByBankCodeAndAccountNumber($(struct_type)_LIST *l, 
                                                                                            const char *bankCode,
                                                                                            const char *accountNumber,
                                                                                            int accountType) {
               AB_IMEXPORTER_ACCOUNTINFO *iea;
             
               assert(l);
               
               if (!bankCode)
                 bankCode="";
               if (!accountNumber)
                 accountNumber="";
             
               iea=$(struct_prefix)_List_First(l);
               while(iea) {
                 const char *sBankCode;
                 const char *sAccountNumber;
             
                 sBankCode=$(struct_prefix)_GetBankCode(iea);
                 if (sBankCode==NULL)
                   sBankCode="";
                 sAccountNumber=$(struct_prefix)_GetAccountNumber(iea);
                 if (sAccountNumber==NULL)
                   sAccountNumber="";

                 if ((strcasecmp(sBankCode, bankCode)==0) &amp;&amp;
                     (strcasecmp(sAccountNumber, accountNumber)==0) &amp;&amp;
                     ((accountType&lt;=AB_AccountType_Unknown) || (accountType==$(struct_prefix)_GetAccountType(iea)))
                    )
                   return iea;
                 
                 iea=$(struct_prefix)_List_Next(iea);
               }
               
               return NULL;
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <content>
             $(api) AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_Find($(struct_type)_LIST *l,
                                                                          uint32_t uniqueId,
                                                                          const char *iban,
                                                                          const char *bankCode,
                                                                          const char *accountNumber,
                                                                          int accountType);
          </content>
        </inline>

        <inline loc="code">
          <content>
             AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_Find($(struct_type)_LIST *l,
                                                                   uint32_t uniqueId,
                                                                   const char *iban,
                                                                   const char *bankCode,
                                                                   const char *accountNumber,
                                                                   int accountType) {
               AB_IMEXPORTER_ACCOUNTINFO *iea=NULL;
             
               assert(l);
               
               if (uniqueId)
                 iea=$(struct_prefix)_List_GetByAccountId(l, uniqueId);
               
               if (iea==NULL &amp;&amp; iban &amp;&amp; *iban)
                 $(struct_prefix)_List_GetByIban(l, iban);
               
               if (iea==NULL)
                 iea=$(struct_prefix)_List_GetByBankCodeAndAccountNumber(l, bankCode, accountNumber, accountType);
               
               return iea;
             }
          </content>
        </inline>




        <inline loc="end" access="public">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>
             /** \n
              * Check whether a given account info object matches the given criteria.            \n
              * @param a account info object to match                                            \n
              * @param uniqueId unique account id (use 0 as wildcard)                            \n
              * @param country ISO code of the country (wildcards and jokers allowed)            \n
              * @param bankId bank code to search for (wildcards and jokers allowed)             \n
              * @param accountNumber account number to search for (wildcards and jokers allowed) \n
              * @param subAccountId sub account number (wildcards and jokers allowed)            \n
              * @param iban IBAN to search for (wildcards and jokers allowed)                    \n
              * @param currency currecny the account uses (wildcards and jokers allowed)         \n
              * @param ty account type (use AB_AccountType_Unknown as wildcard)                  \n
              */                                                                                 \n
             $(api) int $(struct_prefix)_Matches(const $(struct_type) *a,
                                                 uint32_t uniqueId,
                                                 const char *country,
                                                 const char *bankId,
                                                 const char *accountNumber,
                                                 const char *subAccountId,
                                                 const char *iban,
                                                 const char *currency,
                                                 int ty);
          </content>
        </inline>



        <inline loc="code">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>
             int $(struct_prefix)_Matches(const $(struct_type) *a,
                                          uint32_t uniqueId,
                                          const char *country,
                                          const char *bankId,
                                          const char *accountNumber,
                                          const char *subAccountId,
                                          const char *iban,
                                          const char *currency,
                                          int ty) {
               const char *lcountry;
               const char *lbankId;
               const char *laccountNumber;
               const char *lsubAccountId;
               const char *liban;
               const char *lcurrency;
               int lty;
  
               if (!country) country="*";
               if (!bankId) bankId="*";
               if (!accountNumber) accountNumber="*";
               if (!subAccountId) subAccountId="*";
               if (!iban) iban="*";
               if (!currency) currency="*";
               if (ty>=AB_AccountType_Last) ty=AB_AccountType_Unknown;
             
           
               lcountry=$(struct_prefix)_GetCountry(a);
               lbankId=$(struct_prefix)_GetBankCode(a);
               laccountNumber=$(struct_prefix)_GetAccountNumber(a);
               lsubAccountId=$(struct_prefix)_GetSubAccountId(a);
               liban=$(struct_prefix)_GetIban(a);
               lcurrency=$(struct_prefix)_GetCurrency(a);
               lty=$(struct_prefix)_GetAccountType(a);
           
               if (!lcountry) lcountry="";
               if (!lbankId) lbankId="";
               if (!laccountNumber) laccountNumber="";
               if (!lsubAccountId) lsubAccountId="";
               if (!liban) liban="";
               if (!lcurrency) lcurrency="";
               if (lty>=AB_AccountType_Last || lty &lt;=AB_AccountType_Unknown) lty=AB_AccountType_Unknown;
           
               if (((uniqueId==0 || uniqueId==$(struct_prefix)_GetAccountId(a))) &amp;&amp;
                   (-1!=GWEN_Text_ComparePattern(lcountry, country, 0)) &amp;&amp;
                   (-1!=GWEN_Text_ComparePattern(lbankId, bankId, 0)) &amp;&amp;
                   (-1!=GWEN_Text_ComparePattern(laccountNumber, accountNumber, 0)) &amp;&amp;
                   (-1!=GWEN_Text_ComparePattern(lsubAccountId, subAccountId, 0)) &amp;&amp;
                   (-1!=GWEN_Text_ComparePattern(liban, iban, 0)) &amp;&amp;
                   (-1!=GWEN_Text_ComparePattern(lcurrency, currency, 0)) &amp;&amp;
                   ((ty==AB_AccountType_Unknown) || (ty==lty)))
                 return 1;
             
               return 0;
             }
          </content>
        </inline>


        <inline loc="end" access="private">
          <typeFlagsMask>with_list1</typeFlagsMask>
          <typeFlagsValue>with_list1</typeFlagsValue>
          <content>
             /** \n
              * Find an account info object in a list of account info objects.                   \n
              * @param a account info object with which to start searching                       \n
              * @param uniqueId unique account id (use 0 as wildcard)                            \n
              * @param country ISO code of the country (wildcards and jokers allowed)            \n
              * @param bankId bank code to search for (wildcards and jokers allowed)             \n
              * @param accountNumber account number to search for (wildcards and jokers allowed) \n
              * @param subAccountId sub account number (wildcards and jokers allowed)            \n
              * @param iban IBAN to search for (wildcards and jokers allowed)                    \n
              * @param currency currecny the account uses (wildcards and jokers allowed)         \n
              * @param ty account type (use AB_AccountType_Unknown as wildcard)                  \n
              */                                                                                 \n
             $(struct_type) *$(struct_prefix)_List__FindInternal($(struct_type) *a,
                                                                 uint32_t uniqueId,
                                                                 const char *country,
                                                                 const char *bankId,
                                                                 const char *accountNumber,
                                                                 const char *subAccountId,
                                                                 const char *iban,
                                                                 const char *currency,
                                                                 int ty);
          </content>
        </inline>



        <inline loc="code">
          <typeFlagsMask>with_list1</typeFlagsMask>
          <typeFlagsValue>with_list1</typeFlagsValue>
          <content>
             $(struct_type) *$(struct_prefix)_List__FindInternal($(struct_type) *a,
                                                                uint32_t uniqueId,
                                                                const char *country,
                                                                const char *bankId,
                                                                const char *accountNumber,
                                                                const char *subAccountId,
                                                                const char *iban,
                                                                const char *currency,
                                                                int ty) {


               if (!country) country="*";
               if (!bankId) bankId="*";
               if (!accountNumber) accountNumber="*";
               if (!subAccountId) subAccountId="*";
               if (!iban) iban="*";
               if (!currency) currency="*";
               if (ty>=AB_AccountType_Last) ty=AB_AccountType_Unknown;
             
               while(a) {
                 int rv;
                   
                 rv=$(struct_prefix)_Matches(a,
                                             uniqueId,
                                             country,
                                             bankId,
                                             accountNumber,
                                             subAccountId,
                                             iban,
                                             currency,
                                             ty);
                 if (rv==1)
                   break;
                 a=$(struct_prefix)_List_Next(a);
               } /* while */
             
               return a;
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <typeFlagsMask>with_list1</typeFlagsMask>
          <typeFlagsValue>with_list1</typeFlagsValue>
          <content>
             /** \n
              * Find the first matching account info object in a list of account info objects.   \n
              * @param al list of account info objects among to search                           \n
              * @param uniqueId unique account id (use 0 as wildcard)                            \n
              * @param country ISO code of the country (wildcards and jokers allowed)            \n
              * @param bankId bank code to search for (wildcards and jokers allowed)             \n
              * @param accountNumber account number to search for (wildcards and jokers allowed) \n
              * @param subAccountId sub account number (wildcards and jokers allowed)            \n
              * @param iban IBAN to search for (wildcards and jokers allowed)                    \n
              * @param currency currecny the account uses (wildcards and jokers allowed)         \n
              * @param ty account type (use AB_AccountType_Unknown as wildcard)          \n
              */                                                                                 \n
             $(api) $(struct_type) *$(struct_prefix)_List_FindFirst($(struct_type)_LIST *al,
                                                                    uint32_t uniqueId,
                                                                    const char *country,
                                                                    const char *bankId,
                                                                    const char *accountNumber,
                                                                    const char *subAccountId,
                                                                    const char *iban,
                                                                    const char *currency,
                                                                    int ty);
          </content>
        </inline>



        <inline loc="code">
          <typeFlagsMask>with_list1</typeFlagsMask>
          <typeFlagsValue>with_list1</typeFlagsValue>
          <content>
             $(struct_type) *$(struct_prefix)_List_FindFirst($(struct_type)_LIST *al,
                                                             uint32_t uniqueId,
                                                             const char *country,
                                                             const char *bankId,
                                                             const char *accountNumber,
                                                             const char *subAccountId,
                                                             const char *iban,
                                                             const char *currency,
                                                             int ty) {
               $(struct_type) *a;
             
               if ($(struct_prefix)_List_GetCount(al)==0) {
                 DBG_INFO(AQBANKING_LOGDOMAIN, "No accounts");
                 return NULL;
               }
               a=$(struct_prefix)_List_First(al);
               assert(a);

               return $(struct_prefix)_List__FindInternal(a, 
                                                          uniqueId,
                                                          country,
                                                          bankId,
                                                          accountNumber,
                                                          subAccountId,
                                                          iban,
                                                          currency,
                                                          ty);
             }
          </content>
        </inline>



        <inline loc="end" access="public">
          <typeFlagsMask>with_list1</typeFlagsMask>
          <typeFlagsValue>with_list1</typeFlagsValue>
          <content>
             /** \n
              * Find the next matching account info object in a list of account info objects.    \n
              * @param a previous matching account info objects among to search                  \n
              * @param uniqueId unique account id (use 0 as wildcard)                            \n
              * @param country ISO code of the country (wildcards and jokers allowed)            \n
              * @param bankId bank code to search for (wildcards and jokers allowed)             \n
              * @param accountNumber account number to search for (wildcards and jokers allowed) \n
              * @param subAccountId sub account number (wildcards and jokers allowed)            \n
              * @param iban IBAN to search for (wildcards and jokers allowed)                    \n
              * @param currency currecny the account uses (wildcards and jokers allowed)         \n
              * @param ty account type (use AB_AccountType_Unknown as wildcard)          \n
              */                                                                                 \n
             $(api) $(struct_type) *$(struct_prefix)_List_FindNext($(struct_type) *a,
                                                                     uint32_t uniqueId,
                                                                     const char *country,
                                                                     const char *bankId,
                                                                     const char *accountNumber,
                                                                     const char *subAccountId,
                                                                     const char *iban,
                                                                     const char *currency,
                                                                     int ty);
          </content>
        </inline>



        <inline loc="code">
          <typeFlagsMask>with_list1</typeFlagsMask>
          <typeFlagsValue>with_list1</typeFlagsValue>
          <content>
             $(struct_type) *$(struct_prefix)_List_FindNext($(struct_type) *a,
                                                              uint32_t uniqueId,
                                                              const char *country,
                                                              const char *bankId,
                                                              const char *accountNumber,
                                                              const char *subAccountId,
                                                              const char *iban,
                                                              const char *currency,
                                                              int ty) {
               assert(a);

               a=$(struct_prefix)_List_Next(a);
               if (a==NULL) {
                 DBG_INFO(AQBANKING_LOGDOMAIN, "No more account specs");
                 return NULL;
               }
               return $(struct_prefix)_List__FindInternal(a, 
                                                          uniqueId,
                                                          country,
                                                          bankId,
                                                          accountNumber,
                                                          subAccountId,
                                                          iban,
                                                          currency,
                                                          ty);
             }
          </content>
        </inline>




<!--
        <inline loc="end" access="public">
          <content>
             $(api) AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_GetByAccount($(struct_type)_LIST *l, const AB_ACCOUNT *a);
          </content>
        </inline>

        <inline loc="code">
          <content>
             AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_GetByAccount($(struct_type)_LIST *l, const AB_ACCOUNT *a) {
               assert(l);
               assert(a);
               
               return $(struct_prefix)_List_Find(l,
                                                 AB_Account_GetUniqueId(a),
                                                 AB_Account_GetIban(a),
                                                 AB_Account_GetBankCode(a),
                                                 AB_Account_GetAccountNumber(a),
                                                 AB_Account_GetAccountType(a));
             }
          </content>
        </inline>


        <inline loc="end" access="public">
          <content>
             $(api) AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_GetOrAddByAccount($(struct_type)_LIST *l, const AB_ACCOUNT *a);
          </content>
        </inline>

        <inline loc="code">
          <content>
             AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_GetOrAddByAccount($(struct_type)_LIST *l, const AB_ACCOUNT *a) {
               AB_IMEXPORTER_ACCOUNTINFO *iea=NULL;
             
               assert(l);
               
               iea=$(struct_prefix)_List_GetByAccount(l, a);
               if (iea==NULL) {
                 iea=$(struct_prefix)_new();
                 $(struct_prefix)_FillFromAccount(iea, a);
                 $(struct_prefix)_List_Add(iea, l);
               }
               return iea;
             }
          </content>
        </inline>
-->

        <inline loc="end" access="public">
          <content>
             $(api) AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_GetOrAdd($(struct_type)_LIST *l,
                                                                              uint32_t uniqueId,
                                                                              const char *iban,
                                                                              const char *bankCode,
                                                                              const char *accountNumber,
                                                                              int accountType);
          </content>
        </inline>

        <inline loc="code">
          <content>
             AB_IMEXPORTER_ACCOUNTINFO *$(struct_prefix)_List_GetOrAdd($(struct_type)_LIST *l,
                                                                       uint32_t uniqueId,
                                                                       const char *iban,
                                                                       const char *bankCode,
                                                                       const char *accountNumber,
                                                                       int accountType) {
               AB_IMEXPORTER_ACCOUNTINFO *iea=NULL;
             
               assert(l);
               
               iea=$(struct_prefix)_List_Find(l, uniqueId, iban, bankCode, accountNumber, accountType);
               if (iea==NULL) {
                 iea=$(struct_prefix)_new();
                 $(struct_prefix)_SetAccountId(iea, uniqueId);
                 $(struct_prefix)_SetIban(iea, iban);
                 $(struct_prefix)_SetBankCode(iea, bankCode);
                 $(struct_prefix)_SetAccountNumber(iea, accountNumber);
                 $(struct_prefix)_SetAccountType(iea, accountType);
                 
                 $(struct_prefix)_List_Add(iea, l);
               }
               return iea;
             }
          </content>
        </inline>



      </inlines>


    </lang>

    <enums>

    </enums>

    <defines>

    </defines>


    <members>

      <member name="country" type="char_ptr" maxlen="16" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="bankCode" type="char_ptr" maxlen="16" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="bankName" type="char_ptr" maxlen="64" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="accountNumber" type="char_ptr" maxlen="32" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="subAccountId" type="char_ptr" maxlen="32" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="accountName" type="char_ptr" maxlen="64" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="iban" type="char_ptr" maxlen="32" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash with_getbyMember</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="bic" type="char_ptr" maxlen="32" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="owner" type="char_ptr" maxlen="64" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="currency" type="char_ptr" maxlen="16" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="description" type="char_ptr" maxlen="64" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="accountType" type="int" maxlen="4" >
        <default>0</default>
        <preset>0</preset>
        <access>public</access>
        <flags>with_hash</flags>
        <setflags>none</setflags>
        <getflags>none</getflags>
      </member>

      <member name="accountId" type="uint32_t" maxlen="4">
        <flags>with_hash with_getbyMember</flags>
        <default>0</default>
        <preset>0</preset>
        <access>public</access>
        <descr>
        </descr>
      </member>

      <member name="balanceList" type="AB_BALANCE_LIST" elementName="balance">
        <descr>
        </descr>
        <default>NULL</default>
        <preset>AB_Balance_List_new()</preset>
        <access>public</access>
        <flags>own</flags>
        <setflags>nodup</setflags>
        <getflags>none</getflags>
      </member>


      <member name="transactionList" type="AB_TRANSACTION_LIST" elementName="transaction">
        <descr>
          List of transactions.
          This list contains any kind of transactions all in one list. You can differentiate the type
          of the transaction (e.g. bank statement, debit note, transfer etc) by looking at the transaction type
          (see @ref AB_Transaction_GetType).
        </descr>
        <default>NULL</default>
        <preset>AB_Transaction_List_new()</preset>
        <access>public</access>
        <flags>own</flags>
        <setflags>nodup</setflags>
        <getflags>none</getflags>
      </member>

      <member name="eStatementList" type="AB_DOCUMENT_LIST" elementName="eStatement">
        <descr>
        </descr>
        <default>NULL</default>
        <preset>AB_Document_List_new()</preset>
        <access>public</access>
        <flags>own</flags>
        <setflags>nodup</setflags>
        <getflags>none</getflags>
      </member>

    </members>

    
  </type>
  
</tm2>

