<?xml?>

<tm2>
  <type id="AQFINTS_TRANSPORT" type="pointer">
    <descr>
    </descr>

    <lang id="c">
      <identifier>AQFINTS_TRANSPORT</identifier>
      <prefix>AQFINTS_Transport</prefix>
      
      <baseFileName>transport</baseFileName>
      
      <flags>
        with_inherit
        with_refcount
        noCopy
        noDup
      </flags>
      
      <headers>
        <header type="sys" loc="pre">libaqfints/aqfints.h</header>
        <header type="sys" loc="pre">gwenhywfar/buffer.h</header>
        <header type="sys" loc="pre">ctype.h</header>

      </headers>


      <inlines>


        <inline loc="end" access="public">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>
             /** \n
             * Expects the given to contain the beginning of a HBCI message starting with a \n
             * HNHBK segment. Reads the message size from the appropriate field of that segment. \n
             */ \n
             $(api) int $(struct_prefix)_DetermineMessageSize(const char *ptr);
          </content>
        </inline>

        <inline loc="code">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>
             int $(struct_prefix)_DetermineMessageSize(const char *ptr) {
               const char *p1;
               const char *p2;
               char *copiedString=NULL;
               int msgSize;
             
               /* seek to begin of size */
               p1=strchr(ptr, '+');
               if (p1==NULL) {
                 DBG_ERROR(AQFINTS_LOGDOMAIN, "Bad data (missing '+')");
                 return GWEN_ERROR_BAD_DATA;
               }
               p1++;
             
               /* seek to end of size */
               p2=strchr(p1, '+');
               if (p2==NULL) {
                 DBG_ERROR(AQFINTS_LOGDOMAIN, "Bad data (missing second '+')");
                 return GWEN_ERROR_BAD_DATA;
               }
             
               /* read message size */
               copiedString=strndup(p1, (p2-p1));
               assert(copiedString);
               if (1!=sscanf(p1, "%d", &msgSize)) {
                 DBG_ERROR(AQFINTS_LOGDOMAIN, "Bad size field [%s]", copiedString);
                 free(copiedString);
                 return GWEN_ERROR_BAD_DATA;
               }
               free(copiedString);
             
               return msgSize;
             }
          </content>
        </inline>




      </inlines>


    </lang>

    <enums>

    </enums>

    <defines>

      <define id="AQFINTS_TRANSPORT_RTFLAGS" prefix="AQFINTS_TRANSPORT_RTFLAGS_">
        <item name="CONNECTED"       value="0x00000001" />
      </define>

    </defines>


    <members>


      <member name="url" type="char_ptr" maxlen="256" >
        <descr>
        </descr>
        <access>public</access>
        <flags>own with_hash</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>


      <member name="runtimeFlags" type="uint32_t" maxlen="8">
        <default>0</default>
        <preset>0</preset>
        <flags>volatile with_flags</flags>
        <access>public</access>
      </member>


    </members>



    <virtualFns>

      <fn name="connect" location="post" >
        <descr>
        </descr>
        <access>public</access>
        <returnType>int</returnType>
        <defaultReturnValue>GWEN_ERROR_NOT_IMPLEMENTED</defaultReturnValue>
        <params>
        </params>
      </fn>


      <fn name="disconnect" location="post" >
        <descr>
        </descr>
        <access>public</access>
        <returnType>int</returnType>
        <defaultReturnValue>GWEN_ERROR_NOT_IMPLEMENTED</defaultReturnValue>
        <params>
        </params>
      </fn>


      <fn name="sendMessage" location="post" >
        <descr>
          Send a HBCI message. Returns 0 if okay, error code otherwise.
        </descr>
        <access>public</access>
        <returnType>int</returnType>
        <defaultReturnValue>GWEN_ERROR_NOT_IMPLEMENTED</defaultReturnValue>
        <params>
          <param type="const char*"       name="ptrBuffer" >
            <descr>Pointer to a buffer containing the message to be sent</descr>
          </param>

          <param type="int"               name="lenBuffer" >
            <descr>size of the buffer containing the message to be sent</descr>
          </param>
        </params>
      </fn>


      <fn name="receiveMessage" location="post" >
        <descr>
          Receive a HBCI message. Returns 0 if okay, error code otherwise.
        </descr>
        <access>public</access>
        <returnType>int</returnType>
        <defaultReturnValue>GWEN_ERROR_NOT_IMPLEMENTED</defaultReturnValue>
        <params>
          <param type="GWEN_BUFFER*"      name="buffer" >
            <descr>Pointer to a GWEN_BUFFER to receive the HBCI message</descr>
          </param>
        </params>
      </fn>


    </virtualFns>

    
  </type>
  
</tm2>

